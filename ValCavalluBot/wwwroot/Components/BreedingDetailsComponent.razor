@using Shares
@using Shares.Model
@using Services
@using Shares.Enum
@using System.Threading
@inject IBotManagerService BotManagerService
@using System.Collections.Concurrent


<tr>
    <td><a href="@string.Format("/bots/{0}", Bot.Id)">@Bot.Settings.Credentials.HowrseUsername</a></td>
    <td>@Bot.Id</td>
    <td class="text-capitalize text-info">@Bot.CurrentAction.ToString()</td>
    <td>
        @switch (Bot.Status)
        {
            case Shares.Enum.BotClientStatus.Stopped:
                <button class="btn btn-success" type="button" @onclick="@StartBreeding">
                    <span role="status" aria-hidden="true">
                        Start
                    </span>
                </button>
                break;
            case Shares.Enum.BotClientStatus.Started:
                <button class="btn btn-primary" type="button" @onclick="@StopBreeding">
                    <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true">
                    </span>
                    Stoppen
                </button>
                break;
            default:
                break;
        }
    </td>
    <td>
        <input type="button" class="btn btn-danger" @onclick="@Delete" value="Löschen" />
    </td>
</tr>



@code {
    [Parameter]
    public HowrseBotModel Bot { get; set; }

    [Parameter]
    public EventCallback<string> OnBotDeletedEvent { get; set; }

    private CancellationTokenSource cts = new();

    protected override void OnInitialized()
    {
        Bot.OnBotStatusChanged += OnBotStatusChangedEvent;
        Bot.OnBotCurrentActionChanged += OnBotCurrentStatusChangedEvent;
    }

    private async Task Delete()
    {
        BotManagerService.DeleteBot(Bot.Id);
        await OnBotDeletedEvent.InvokeAsync(Bot.Id);
    }

    private async Task StartBreeding()
    {
        await BotManagerService.StartBreeding(Bot, cts);
    }

    private void StopBreeding()
    {
        cts.Cancel();
    }

    private void OnBotStatusChangedEvent(BotClientStatus status)
    {
        InvokeAsync(() => StateHasChanged());
    }
    private void OnBotCurrentStatusChangedEvent(BotClientCurrentAction action)
    {
        InvokeAsync(() => StateHasChanged());
    }


}
