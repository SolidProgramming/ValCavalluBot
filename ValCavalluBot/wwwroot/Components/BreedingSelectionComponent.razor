@using Shares.Model;
@using Shares.Enum;
@using Services;
@using Enum;
@using ValCavalluBot.wwwroot.Components;
@using ValCavalluBot.Classes;
@inject NavigationManager NavigationManager;
@inject ISettingsService SettingsService;
@inject IBotManagerService BotManagerService;
@inject IGRPCService GRPCService;

<div class="row d-flex justify-content-center mb-2 mt-4">
    <div class="input-group rounded col-md-3">
        <input type="search" class="form-control rounded" placeholder="Zucht Name" aria-label="Search"
               aria-describedby="search-addon" />
        <span class="input-group-text border-0 ml-1" id="search-addon">
            Suchen
        </span>
    </div>
</div>
<hr />
<div class="row">
    <div class="col">
        @if (Bot.Settings.Breedings.Count == 0)
        {
            <div class="d-flex justify-content-center mt-2">
                <div class="spinner-grow text-warning" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
                <div class="spinner-grow text-warning" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
                <div class="spinner-grow text-warning" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        }
        <HowrseBreedingsList Bot="@Bot" Breedings="Bot.Settings.Breedings" AddedBreedingEvent="AddedBreedingEvent" RemovedBreedingEvent="RemovedBreedingEvent"></HowrseBreedingsList>
    </div>
</div>

@code {
    //[Parameter]
    //public string Id { get; set; }

    [Parameter]
    public string SelectionType { get; set; }

    [Parameter]
    public HowrseBotModel Bot { get; set; }

    private BreedingSelectionType SelectedType { get; set; }

    private void AddedBreedingEvent(HowrseBreedingModel breeding)
    {
        switch (SelectedType)
        {
            case BreedingSelectionType.Apler:
                if (!Bot.Settings.TempChosenBreedingsApler.Any(_ => _.ID == breeding.ID))
                {
                    Bot.Settings.TempChosenBreedingsApler.Add(breeding);
                }
                break;
            case BreedingSelectionType.Breed:
                if (!Bot.Settings.TempChosenBreedingsBreed.Any(_ => _.ID == breeding.ID))
                {
                    Bot.Settings.TempChosenBreedingsBreed.Add(breeding);
                }
                break;
            default:
                break;
        }
    }

    private void RemovedBreedingEvent(HowrseBreedingModel breeding)
    {
        switch (SelectedType)
        {
            case BreedingSelectionType.Apler:
                Bot.Settings.TempChosenBreedingsApler.RemoveAll(_ => _.ID == breeding.ID);
                break;
            case BreedingSelectionType.Breed:
                Bot.Settings.TempChosenBreedingsBreed.RemoveAll(_ => _.ID == breeding.ID);
                break;
            default:
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (base.ToString().IsFirstRender())
        {
            List<HowrseBreedingModel> breedingsFromServer = await GRPCService.GetBreedings(Bot);
            if (breedingsFromServer.Count > 0)
            {
                Bot.Settings.Breedings = breedingsFromServer;
            }
        }

        PageFirstRenderHandler.ComponentSetRendered(base.ToString());
    }
}